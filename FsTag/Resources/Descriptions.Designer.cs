//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FsTag.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Descriptions {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Descriptions() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("FsTag.Resources.Descriptions", typeof(Descriptions).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bulk opertions to execute on currently tagged files..
        /// </summary>
        internal static string BulkCommand {
            get {
                return ResourceManager.GetString("BulkCommand", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Delete every tagged file..
        /// </summary>
        internal static string BulkDeleteCommand {
            get {
                return ResourceManager.GetString("BulkDeleteCommand", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cleans the index of any invalid files (i.e, those that do not exist)..
        /// </summary>
        internal static string CleanCommand {
            get {
                return ResourceManager.GetString("CleanCommand", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Access to the global configuration file..
        /// </summary>
        internal static string ConfigCommand {
            get {
                return ResourceManager.GetString("ConfigCommand", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set the specified config to the specified Json value..
        /// </summary>
        internal static string ConfigSetCommand {
            get {
                return ResourceManager.GetString("ConfigSetCommand", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whether to send deleted items to the recycle bin..
        /// </summary>
        internal static string DeleteRecycle {
            get {
                return ResourceManager.GetString("DeleteRecycle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Extended information on various commands and topics in FsTag..
        /// </summary>
        internal static string DocsCommand {
            get {
                return ResourceManager.GetString("DocsCommand", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to List of documentation modules to output sequentially..
        /// </summary>
        internal static string DocsModulesOperand {
            get {
                return ResourceManager.GetString("DocsModulesOperand", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For every supported command, avoid permanent changes (such as filesystem edits)..
        /// </summary>
        internal static string DryrunOption {
            get {
                return ResourceManager.GetString("DryrunOption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The path filter to use. &quot;See fstag print filters&quot; for details..
        /// </summary>
        internal static string FilterOperand {
            get {
                return ResourceManager.GetString("FilterOperand", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Configuration key to print..
        /// </summary>
        internal static string GetConfigKey {
            get {
                return ResourceManager.GetString("GetConfigKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whether to include directories when filtering..
        /// </summary>
        internal static string IncludeDirsOp {
            get {
                return ResourceManager.GetString("IncludeDirsOp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For every supported command, prompts are ignored and assumed to evaluate to a positive response (i.e, yes in yes/no). Note that --quiet has the same effect in this regard..
        /// </summary>
        internal static string NoPromptOption {
            get {
                return ResourceManager.GetString("NoPromptOption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Print the specified keys sequentially. Outputs the list of valid keys if given no arguments..
        /// </summary>
        internal static string PrintCommand {
            get {
                return ResourceManager.GetString("PrintCommand", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to List of keys to print sequentially..
        /// </summary>
        internal static string PrintKeysOperand {
            get {
                return ResourceManager.GetString("PrintKeysOperand", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Suppress all terminal output *including input prompts*. That is, prompts will be answered positiviely (i.e, yes in yes/no)..
        /// </summary>
        internal static string QuietOption {
            get {
                return ResourceManager.GetString("QuietOption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Recurse depth to tag up until. 0 (default) denotes no recursion, values less than 0 denote no limit..
        /// </summary>
        internal static string RecursiveOp {
            get {
                return ResourceManager.GetString("RecursiveOp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Untag all indexed files..
        /// </summary>
        internal static string RemoveAllCommand {
            get {
                return ResourceManager.GetString("RemoveAllCommand", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Removes files from the index based on the provided filter..
        /// </summary>
        internal static string RemoveCommand {
            get {
                return ResourceManager.GetString("RemoveCommand", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Switch between and view tag sesssions..
        /// </summary>
        internal static string SessionCommand {
            get {
                return ResourceManager.GetString("SessionCommand", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Delete the specified session if it exists..
        /// </summary>
        internal static string SessionRemoveCommand {
            get {
                return ResourceManager.GetString("SessionRemoveCommand", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name of the session to delete..
        /// </summary>
        internal static string SessionRemoveName {
            get {
                return ResourceManager.GetString("SessionRemoveName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Switch (and create if necessary) to the specified session..
        /// </summary>
        internal static string SessionSwitchCommand {
            get {
                return ResourceManager.GetString("SessionSwitchCommand", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name of the session to switch to..
        /// </summary>
        internal static string SessionSwitchName {
            get {
                return ResourceManager.GetString("SessionSwitchName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Configuration key to set..
        /// </summary>
        internal static string SetConfigKey {
            get {
                return ResourceManager.GetString("SetConfigKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Json value to set to the specified configuration key..
        /// </summary>
        internal static string SetConfigValue {
            get {
                return ResourceManager.GetString("SetConfigValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Adds files to the current session index based on the provided filter..
        /// </summary>
        internal static string TagCommand {
            get {
                return ResourceManager.GetString("TagCommand", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Output verbosity for this command..
        /// </summary>
        internal static string VerbosityOperand {
            get {
                return ResourceManager.GetString("VerbosityOperand", resourceCulture);
            }
        }
    }
}
